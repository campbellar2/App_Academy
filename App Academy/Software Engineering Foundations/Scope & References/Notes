# Software Engineering Foundation Notes #


#######


# Scope & References #

# Bubble Sort Algorithm #

#The Bubble Sort algorithm gets its name because it behaves as if the large numbers float to the top of the array like bubbles.
#Bubble sort works by performing multiple passes to move elements closer to their final positions. 
#A single pass will iterate through the entire array once.
#A pass works by scanning the array from left to right, two adjacent elements at a time, and checking if they are ordered correctly. 
#To be ordered correctly the first element must be less than or equal to the second. 
#If the two elements are not ordered properly, then we swap them to correct their relative order. 
#Afterwards, we scan the next two numbers and continue to repeat this process until we have gone through the entire array.

#Bubble Sort Completion
#During Bubble Sort, we can tell if the array is in sorted order by checking if we made a swap during the previous pass performed.

#Swapping Elements
#A key detail is that we may need an extra temporary variable to store one of the elements since we will be overwriting them in the array:
array = ["a", "b", "c", "d"]  # let's swap "a" and "b"
temp = array[0];              # save a copy of the first ele
array[0] = array[1];          # overwrite the first ele with the second ele
array[1] = temp;              # overwrite the second ele with the first ele copy
p array          # => ["b", "a", "c", "d"]

#It worked! But hmmm, using that temp variable was kind of messy. 
#Is there an easier way to swap elements of an array? Yep! Ruby has many clean shortcuts:
array = ["a", "b", "c", "d"]    # let's swap "a" and "b"
array[0], array[1] = array[1], array[0]
p array         # => ["b", "a", "c", "d"]

#As a side note: you can use this swapping mechanic for entire variables as well
food = "mom's spaghetti"
clothing = "sweater"

food, clothing = clothing, food

p food      # => "sweater"   
p clothing  # => "mom's spaghetti"

#Bubble Sort Ruby Implementation
#Using swap and our newfound understanding of Bubble Sort, let's code! 
#Take a look at the snippet below and try to understand how it corresponds to our conceptual understanding of the algorithm. 
def bubble_sort(array)
    sorted = false  # when this var is false, that means the array is not fully sorted yet

    while !sorted       # while the array is not sorted...
        sorted = true       # reset the sorted flag to true 

        # the each below will perform a single 'pass' of bubble sort
        (0...array.length - 1).each do |i|
            if array[i] > array[i + 1]                              # if adjacent elements are out of order...
                array[i], array[i + 1] = array[i + 1], array[i]     #   then swap their positions
                sorted = false                                      # since we just made a swap, we may need to perform
            end                                                     # an additional 'pass', so set the flag to false
        end
    end

    array
end

p bubble_sort([2, 8, 5, 2, 6])\


#################


# Scope Notes #

#Scope
#Scope describes the location in your program where a variable is accessible.

#Methods and Local Scope
#Lexical scope describes how a variable name evaluates in nested code. 
#In other words, how variable names resolve if we put them in structures like methods, conditionals, or blocks?
def say_hello
    message = "hello"
    p message
end

say_hello
#Above we can say that the say_hello method has its own scope where the variable message is defined. 
#This means we are free to reference and print that variable in that same scope. 
#The say_hello method is a local scope. This will be true for any method.

#This means that if we are outside of the say_hello method/scope, we cannot reference the message variable:
def say_hello
    message = "hello"
end

say_hello
p message   # NameError: undefined local variable
#The code above will fail with an error because we are referencing a variable, message, but it was not defined in that scope. 
#We can imagine there being two scopes in that example. 
#There is the sayHello method scope and the surrounding scope that is on the outside of sayHello.

#What if we had defined a variable in the surrounding scope and tried to reference it within the say_hello scope:
message = "hi"

def say_hello
    p message   # NameError: undefined local variable
end

say_hello
#The say_hello scope does not have access to the surrounding scope. 
#From our previous example it seems that a scope is determined by a method. 
#Each method will have its own local scope. This is going to be our rule of thumb. 
#Technically we consider code out in the open as another local scope, although it's not a method. 
#It's common for new ruby programmers to think that variables defined out in the open will automatically be accessible in the global scope, but this is not true.

#Global Variables
#Everywhere area in our code can access the global scope. 
#To define variables in the global scope, we must use special syntax. 
#Let's redo our last example utilizing global scope:
$message = "hello globe"

def say_hello
    p $message
end

say_hello # => "hello globe"
#This code will correctly print "hello globe". 
#Creating a global variable is simple, put a $ at the beginning of the name. 
#Here's a similar example, this time creating the global $message inside of say_hello but referencing it from the outside:
def say_hello
    $message = "hello globe"
end

say_hello
p $message # => "hello globe"
#Ruby automatically defines some global variables for us to reference. 
#For example, $PROGRAM_NAME will be a string describing the name of our program. 
#Later in the course we'll use other global names like $stdin and $stdout handle user input and output. 
#For now, just understand that we can reference a $variable_name anywhere in our program because it is global!

#Constants
#Let's take a quick detour to explore an additional way to create a variable, using a constant. 
#A constant is denoted syntactically by beginning the name with a capital letter. 
#By convention we like to make the entire name capital to emphasize it being a special constant.

#A constant variable cannot be reassigned:
FOOD = "pho"
p FOOD # => "pho"

FOOD = "ramen"  #warning: already initialized constant FOOD
                #warning: previous definition of FOOD was here
#You'll receive a warning when reassigning a constant. 
#Reassignment means using = on that name again. 
#A common point of confusion is that while you cannot reassign a constant, you can still mutate that constant name without warning:
FOOD = "pho"
FOOD[0] = "P"
p FOOD # => "Pho

#Note that above we did not reassign to the FOOD name, instead we assign to an index of the FOOD string. 
#The key takeaway is that constants can still mutate or be "changed", they just can't be reassigned.

#Why bring up constants in our chatter about scope? 
#Because constants will exist in global scope! 
#We can do VARIABLE or $variable to ensure global scoping:
FOOD = "pho"
$drink = "ice coffee"

def my_favorite
    p FOOD
    p $drink
end

my_favorite
#The code above works because both variables are accessible in global scope. 
#This means they can be referenced anywhere in our code! 
#However, we should use the global scope sparingly. 
#We want to minimize our methods all referencing data that is outside of them, as manipulations to the data will be hard to track. 
#Instead we should write methods that accept data as arguments as it is more explicit where the data is coming from.

#What has no scope?
#So methods and the global scope will be our primary structures that provide scope. 
#Now let's highlight what structures don't have their own scope.

#Blocks don't have their own scope, they are really a part of the containing method's scope. 
#Below, the times block can reference message.
def say_bye
    message = "bye"

    3.times do 
        p message
    end
end

say_bye

#Other structures like conditionals or while loops also don't have their own scope, they are really part of the containing scope. 
#Although a variable is defined within the if statement below, it is still accessible outside of the if statement, because if's don't have their own scope.
if true
    drink = "cortado"
end

p drink


################


#
